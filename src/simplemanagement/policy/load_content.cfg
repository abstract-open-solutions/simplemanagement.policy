[transmogrifier]
pipeline =
    source
    skip_blank_lines
    set_operatives
    set_repositories
    set_environments
    set_milestones

    constructor
# pdb
    archetype_schemaupdater
    dexterity_schemaupdater
    workflowupdater
    reindexer
    savepoint


[skip_blank_lines]
blueprint = collective.transmogrifier.sections.condition
condition=item/_path


[set_milestones]
blueprint = collective.transmogrifier.sections.inserter
key = string:milestones
value = python:modules['simplemanagement'].policy.set_milestones(item['milestones'])
condition = python:item.get('milestones', None)


[set_environments]
blueprint = collective.transmogrifier.sections.inserter
key = string:environments
value = python:modules['simplemanagement'].policy.set_environment(item['environments'])
condition = python:item.get('environments', None)


[set_repositories]
blueprint = collective.transmogrifier.sections.inserter
key = string:repositories
value = python:eval(item['repositories'])
condition = python:item.get('repositories', None)


[set_operatives]
blueprint = collective.transmogrifier.sections.inserter
key = string:operatives
value = python:modules['simplemanagement'].policy.set_operatives(item['operatives'])
condition = python:item.get('operatives', None)


[source]
blueprint = collective.transmogrifier.sections.csvsource
filename = simplemanagement.policy:data/load_content.csv


[constructor]
# requires {'_path': '/xxx/yyy', '_type': 'Folder'}
blueprint = collective.transmogrifier.sections.constructor


[archetype_schemaupdater]
# es {'title': 'My Content', 'description': 'Content description...'}
# for dexterity content types and archetype
# blueprint = transmogrify.dexterity.schemaupdater
blueprint = plone.app.transmogrifier.atschemaupdater
condition = item['ct_type'] == 'archetype'

[dexterity_schemaupdater]
# es {'title': 'My Content', 'description': 'Content description...'}
blueprint = transmogrify.dexterity.schemaupdater
condition = item['ct_type'] == 'dexterity'


[workflowupdater]
# requires {'_transitions': ('a', 'b')}
blueprint = plone.app.transmogrifier.workflowupdater


[reindexer]
blueprint = plone.app.transmogrifier.reindexobject


[savepoint]
blueprint = collective.transmogrifier.sections.savepoint
every = 50


[pdb]
blueprint = collective.transmogrifier.sections.breakpoint
condition = python:item.get('operatives')
